from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import Response, FileResponse  # âœ… both!
from agent.lang_agent import run_agent
from tools.generate_finops_report import generate_finops_report
from weasyprint import HTML
from datetime import datetime
import markdown2
import uvicorn
from tools.cost_drift_alert import check_cost_drift
from fastapi.responses import PlainTextResponse
from fastapi.responses import JSONResponse
import os
import json
from tools.preferences import set_user_prefs, get_user_prefs
from pydantic import BaseModel


app = FastAPI()


app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Replace "*" with the specific origins you want to allow
    allow_methods=["OPTIONS", "POST", "GET"],  # Specify allowed methods
    allow_headers=["*"],  # Specify allowed headers
)

class Question(BaseModel):
    message: str

class PreferenceUpdate(BaseModel):
    user_id: str
    preferences: dict

HISTORY_LOG = "tools/spend_history_log.json"

@app.get("/")
async def read_root():
    return {"message": "Hello, World!"}

@app.post("/ask")
async def ask_endpoint(q: Question):
    response = run_agent(q.message)
    return {"response": response}

@app.get("/report")
def report_endpoint():
    result = generate_finops_report()
    return {"report": result["output"]}

@app.get("/report/download")
def report_download():
    result = generate_finops_report()
    markdown = result["output"]
    return Response(content=markdown, media_type="text/markdown", headers={
        "Content-Disposition": "attachment; filename=finly_report.md"
    })


@app.post("/set-preferences")
def set_prefs(data: PreferenceUpdate):
    set_user_prefs(data.preferences, user_id=data.user_id)
    return {"message": "Preferences updated"}

@app.get("/check-drift", response_class=PlainTextResponse)
def check_drift(threshold: float = 10.0):
    result = check_cost_drift(threshold=threshold)
    return result

@app.get("/drift-history", response_class=JSONResponse)
def drift_history():
    if not os.path.exists(HISTORY_LOG):
        return {"message": "No history found", "data": []}
    
    with open(HISTORY_LOG, "r") as f:
        data = json.load(f)
    
    return {"data": data}

@app.get("/report/pdf")
def report_pdf():
    result = generate_finops_report()
    markdown = result["output"]

    # Convert to HTML
    html_body = markdown2.markdown(markdown)

    full_html = f"""
    <html>
    <head>
      <style>
        body {{
          font-family: 'Segoe UI', sans-serif;
          margin: 40px;
          color: #1f2937;
        }}
        h1, h2, h3 {{
          color: #007aff;
        }}
        pre {{
          background: #f5f5f5;
          padding: 10px;
          border-radius: 6px;
        }}
        .footer {{
          margin-top: 50px;
          font-style: italic;
          font-size: 14px;
        }}
      </style>
    </head>
    <body>
      {html_body}
      <div class="footer">Generated by Finly, your AI FinOps Assistant ðŸ¤–</div>
    </body>
    </html>
    """

    # Generate PDF with WeasyPrint
    filename = f"finly-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}.pdf"
    HTML(string=full_html).write_pdf(filename)

    return FileResponse(path=filename, filename="finly_report.pdf", media_type="application/pdf")

if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
